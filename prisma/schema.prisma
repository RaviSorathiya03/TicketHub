generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(100)
  email       String   @unique @db.VarChar(255)
  phoneNumber String   @unique @db.VarChar(15)
  role        UserRole @default(CUSTOMER)
  bookings    Booking[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MerchantUser {
  id            String        @id @default(uuid())
  name          String        @db.VarChar(100)
  organization  String        @unique @db.VarChar(255)
  accountNumber String        @unique @db.VarChar(20)
  ifscCode      String        @db.VarChar(15)
  contactInfo   String        @db.VarChar(255)
  type          MerchantType
  locations     Location[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Show          Show[]
}

model Location {
  id            String        @id @default(uuid())
  name          String        @unique @db.VarChar(100)
  address       String        @db.VarChar(255)
  merchantId    String
  merchant      MerchantUser  @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  shows         Show[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Show {
  id             String   @id @default(uuid())
  name           String   @db.VarChar(100)
  date           DateTime
  locationId     String
  location       Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  merchantId     String
  merchant       MerchantUser @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  seats          Seat[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([date])
}

model Seat {
  id             String    @id @default(uuid())
  seatNumber     String    @db.VarChar(10)
  showId         String
  show           Show      @relation(fields: [showId], references: [id], onDelete: Cascade)
  status         SeatStatus @default(AVAILABLE)
  booking        Booking?
  price          Float
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Booking {
  id             String    @id @default(uuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  seatId         String    @unique
  seat           Seat      @relation(fields: [seatId], references: [id], onDelete: Cascade)
  paymentId      String?   @db.VarChar(50)
  paymentStatus  PaymentStatus @default(PENDING)
  bookedAt       DateTime  @default(now())
  validUntil     DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

enum SeatStatus {
  AVAILABLE
  RESERVED
  SOLD
  LOCKED
}

enum MerchantType {
  BUS
  THEATER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum UserRole {
  ADMIN
  CUSTOMER
}
